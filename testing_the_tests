/* This program takes an output file that is based on some tests that have
been run on an imaginary program. The imaginary program takes an integer
input and a string and then based on the integer either reverses the string
(input of 0) or capitalizes the string (input of 1). Our job is to write 
a program which evaluates the test data being given the initial input
integer, the original string, and the output generated by the imaginary 
program*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAXLEN 15

int str_reverse(char original_string[], char output_string[]);
int str_capital(char original_string[], char output_string[]);

int main(int argc, char *argv[])
{
    FILE *fp;
    int test_num, test_case, i;
    char original_string[MAXLEN], output_string[MAXLEN];
    
    /*Opens the file specified by the command line argument */
    fp = fopen(argv[1], "r");
    fscanf(fp, "%d", &test_num);
    
    for(i = 0; i < test_num; i++){
        fscanf(fp, "%d %s %s\n", &test_case, original_string
            ,output_string);
        if(test_case == 0){
            if(!str_reverse(original_string,output_string)){
                printf("Data is good\n");
                continue;
            }
        }
        
        if(test_case == 1){
            if(!str_capital(original_string, output_string)){
                printf("Data is good\n");
                continue;
            }
        }
        
        printf("Data doesn't match!\n");
        
    }
  
	return 0;
}

int str_reverse(char original_string[], char output_string[])
{
    int j, iter_rev = strlen(original_string);
    char new_string[MAXLEN];
    for(j = 0; j < iter_rev; j++)
    {
        new_string[j] = original_string[iter_rev - (j+1)];
    }
    new_string[j] = '\0';
    return strcmp(new_string, output_string);
}

int str_capital(char original_string[], char output_string[])
{
    int k, iter_cap = strlen(original_string);
    
    for(k = 0; k < iter_cap; k++){
        original_string[k] = toupper(original_string[k]);
    }
    return strcmp(original_string, output_string);
}
